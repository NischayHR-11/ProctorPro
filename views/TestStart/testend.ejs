<% layout("/layouts/boilerplatestartTest") %>

<body>
    <form method="get" action="/scorecard" novalidate class="needs-validation col-md-6 offset-md-2 me-5"style="background-color: rgb(235, 235, 235,.4);border-radius: 1rem;padding: 1.5rem;">
        <h4>Online Test</h4>
        <p class="mt-5">Question &nbsp;&nbsp;<%= number %> &nbsp;Of &nbsp;<%= test.questions.length %></p>
        <p>Level : <%= test.questions[number-1].level%></p>
        <br>
        <h5><%= test.questions[number-1].title%>?</h5>
        <br>
        <div class="mb-3 option" style="border: 1px solid rgb(128, 128, 128,.5);border-radius: .5rem;width:80%">
            <p class="ms-3 mt-2">A)&nbsp;&nbsp; <%= test.questions[number-1].options[0]%></p>
        </div>
        <div class="mb-3 option" style="border: 1px solid rgb(128, 128, 128,.5);border-radius: .5rem;width:80%">
            <p class="ms-3 mt-2">B)&nbsp;&nbsp; <%= test.questions[number-1].options[1]%></p>
        </div>
        <div class="mb-3 option" style="border: 1px solid rgb(128, 128, 128,.5);border-radius: .5rem;width:80%">
            <p class="ms-3 mt-2">C)&nbsp;&nbsp; <%= test.questions[number-1].options[2]%></p>
        </div>
        <div class="mb-3 option" style="border: 1px solid rgb(128, 128, 128,.5);border-radius: .5rem;width:80%">
            <p class="ms-3 mt-2">D)&nbsp;&nbsp;<%= test.questions[number-1].options[3]%></p>
        </div>

        <br>
        <button class="btn btn-outline-danger" type="submit" name="number" value="<%= number %>" onclick="resetTimer()">Submit Test</button>
        <br>
    </form>

    <script>
        const optionDivs = document.querySelectorAll('.option');
    
        optionDivs.forEach(div => {
            div.addEventListener('click', function() {

                // Reset border and background for all options
                optionDivs.forEach(d => {
                    d.style.border = '1px solid rgb(128, 128, 128,.5)';
                    d.style.backgroundColor = 'transparent';  // Reset background
                });
    
                // Set border color to lightblue and add shaded sky blue background for the clicked option
                this.style.border = '2px solid lightblue';
                this.style.backgroundColor = 'rgba(135, 206, 250, 0.2)'; // Sky blue with transparency
            });
        });
    </script>
    <script>
        // Set the total time limit in seconds (e.g., 30 minutes)
        const totalTime = 30 * 60; // 30 minutes
    
        // Check if there's a saved time in localStorage; only set `timeLeft` if not already set
        let timeLeft = parseInt(localStorage.getItem("timeLeft"));
        if (isNaN(timeLeft)) {
            timeLeft = totalTime;
            localStorage.setItem("timeLeft", timeLeft);
        }
    
        // Function to format the time as mm:ss and update the timer display
        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `Time: ${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
        }
    
        // Display the initial timer value from localStorage immediately on page load
        document.getElementById("timer").textContent = formatTime(timeLeft);
    
        // Function to update the timer display every second
        function updateTimer() {
            if (timeLeft > 0) {
                timeLeft--;
                document.getElementById("timer").textContent = formatTime(timeLeft);
                localStorage.setItem("timeLeft", timeLeft);
            } else {
                clearInterval(timerInterval);
                localStorage.removeItem("timeLeft");
                alert("Time is up");
                window.location.href='/';    
            }
        }
    
        // Start the timer interval
        const timerInterval = setInterval(updateTimer, 1000);
    
        // Function to reset the timer
        function resetTimer() {
            clearInterval(timerInterval);              // Stop the timer
            localStorage.removeItem("timeLeft");       // Clear saved time
            timeLeft = totalTime;                      // Reset timeLeft to the original total time
            document.getElementById("timer").textContent = formatTime(timeLeft); // Update display immediately
        }
    
        // Clear timeLeft from storage when the test ends or the timer reaches zero
        window.addEventListener("beforeunload", () => {
            if (timeLeft >= 0) localStorage.removeItem("timeLeft");
        });
    </script>
    
    
    
</body>
